{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"totalCount":11,"edges":[{"node":{"excerpt":"During an assignment for my lecture Software-Development using Enterprise Technologies we had to develop an auctioning system using Spring Boot. The interaction with this system had to be possible…","html":"<p> During an assignment for my lecture <em>Software-Development using Enterprise Technologies</em> we had to develop an auctioning system using Spring Boot. The interaction with this system had to be possible with a CLI developed using <a href=\"https://spring.io/projects/spring-shell\">Spring Shell</a>.</p>\n<p> The command we will look at in this post is the command <strong>bid</strong> which allows to place a on an article for a given user. The interface will look roughly like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> place-bid --article <span class=\"token number\">10</span> --buyer <span class=\"token number\">5</span> --price <span class=\"token number\">124</span> EUR</code></pre></div>\n<h2>Starting out</h2>\n<p>The method signature I started with was using simple, primitive objects as arguments which Spring could automatically parse from the user input.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> articleId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> customerId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span><span class=\"token punctuation\">(</span>arity <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>This left a lot to be desired. First, I want the price to use my abstraction <code class=\"language-text\">CurrencyAmount</code> which combines a numeric value with a unit <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. This was something I needed multiple times for other commands as well and having the conversion logic repeated for multiple commands seemed like a bad move.</p>\n<p>So I looked up how Spring Shell converts user input to method arguments. It turns out converting is done by having a <code class=\"language-text\">Converter&lt;Source, Target></code> component registered - <em>who could've thought</em>. As I had already some helper methods in place to convert a string into a <code class=\"language-text\">CurrencyAmount</code> this was straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrencyAmountConverter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CurrencyAmount</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parts <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Et voilà - now we have improved our command signature significantly already.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> articleId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> customerId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">CurrencyAmount</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h2>Continuing this thought</h2>\n<p>Now I was wondering if it was possible to even extract loading of entities.</p>\n<p>It turns out this works just the same: Implementing a converter <code class=\"language-text\">Converter&lt;String, Customer></code> simply worked.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerLoader</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">CustomerService</span> customerService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> customerService<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntityNotFoundException</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"Could not find customer for id '\"</span>  <span class=\"token operator\">+</span> source <span class=\"token operator\">+</span> <span class=\"token string\">\"'.\"</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After implementing converters for all my entities my problem was solved and it resulted in a nice looking interface for implementing shell commands. Or so it seemed at first...</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Article</span> article<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Customer</span> customer<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">CurrencyAmount</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h2>Troubles in paradise</h2>\n<p>As it turns out problems with lazy-loading arised when trying to access related entities. My first thought was to slap a <code class=\"language-text\">@Transactional()</code> annotation onto the command method but this did not resolve the lazy-loading errors.</p>\n<p>The reason for this was that entities loaded by a converter were not attached to an <code class=\"language-text\">EntityManager</code> and thus the relation proxy could not execute the lazy-loading query.</p>\n<h2>AOP to the rescue</h2>\n<p>Out of curiosity and because I was already down this rabbit-hole too far, I tried to also resolve this issue using a custom <code class=\"language-text\">Aspect</code>. For every <code class=\"language-text\">Entity</code> loaded and injected as an argument, I need to call <code class=\"language-text\">merge()</code> on an open <code class=\"language-text\">EntityManger</code>.</p>\n<p>This was my solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoloadedEntityAttacherAspect</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PersistenceContext</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shellCommands() &amp;&amp; within(io.dominikb.homework3.commands.*)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">attachObjectsToEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.shell.standard.ShellMethod)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shellCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With having flexed my newly acquired knowledge about aspect-oriented programming I was satisfied with my solution and called it a day.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>For simplicity's sake and because floating point arithmetic is hard, my currency abstraction does not allow for cents.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Currency</span> unit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Currency</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">EURO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"€\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">USD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> representation<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> representation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>representation <span class=\"token operator\">=</span> representation<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Currency</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"EUR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"€\"</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span>EURO<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$\"</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span>USD<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No currency available for given string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","id":"b21feb2e-079f-5594-8924-601389559d33","frontmatter":{"title":"Autoloading entities in Spring Shell commands","date":"March 25, 2022","tags":["java","spring","spring-boot"],"excerpt":null},"fields":{"slug":"/2022-03-spring-shell-entity-autoload/"}}},{"node":{"excerpt":"Spring Shell uses a  blocking the main thread in order to run the interactive communication with the user. Other  without any defined  or a lower priority will not be executed before entering the…","html":"<p>Spring Shell uses a <code class=\"language-text\">CommandLineRunner</code> blocking the main thread in order to run the interactive communication with the user.</p>\n<p>Other <code class=\"language-text\">CommandLineRunners</code> without any defined <code class=\"language-text\">@Order()</code> or a lower priority will not be executed before entering the interactive shell. They are only executed once the Spring Shell is executed with the <code class=\"language-text\">exit</code> command.</p>\n<p>In order to have runners run before the shell they need an <code class=\"language-text\">@Order()</code> lower than 0.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Run before Spring Shell</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbSeedRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandLineRunner</span></code></pre></div>\n<p>Source:</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-shell/docs/2.0.0.M2/api/org/springframework/shell/jline/DefaultShellApplicationRunner.html\">https://docs.spring.io/spring-shell/docs/2.0.0.M2/api/org/springframework/shell/jline/DefaultShellApplicationRunner.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/62732605/spring-shell-with-command-line-runner-interface\">https://stackoverflow.com/questions/62732605/spring-shell-with-command-line-runner-interface</a></li>\n</ul>","id":"8fd1c413-ba17-50d0-a839-7bcd1c62c622","frontmatter":{"title":"CommandLineRunners in Spring Shell","date":"March 25, 2022","tags":["java","spring","spring-boot"],"excerpt":"Spring Shell uses a CommandLineRunner blocking the main thread in order to run the interactive communication with the user. Other CommandLineRunners without any defined @Order or a lower priority,\nwill not be executed before...\n"},"fields":{"slug":"/2022-03-25-spring-shell-with-command-line-runners/"}}},{"node":{"excerpt":"Once, I wrote some code that read similar to this: As this were just stub-classes they were not used in any test. They pipeline succeeded and deployed the code to a staging environment. This resulted…","html":"<p>Once, I wrote some code that read similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Stub</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Applicable</span> <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImmediatelyApplicable</span> <span class=\"token operator\">&lt;</span> Applicable\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayedApplicable</span> <span class=\"token operator\">&lt;</span> Applicalbe\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As this were just stub-classes they were not used in any test. They pipeline succeeded and deployed the code to a staging environment. This resulted in an error and the service was down, albeit working perfectly on my machine! </p>\n<blockquote>\n<p><strong>[2022-03-04T12:34:56+00.00 app[worker.1]: pid=1 tid=2ks]</strong> WARN: NameError: uninitialized constant Stub::Applicalbe</p>\n</blockquote>\n<p>Turns out, I made a typo and wrote <em>Applica<strong>lb</strong>e</em>. *facepalm*</p>\n<p>When in development mode, files are only required when they are needed the first time but when running <code class=\"language-text\">Rails</code> in production mode, it was eager loading all the files.</p>\n<p>Turns out, you can reproduce this locally in your console to re-create the error:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ bin/rails console\nirb(main):001:0&gt; Rails.application.eager_load!</code></pre></div>","id":"6de45c75-752b-5c97-944d-5c7b4b27dded","frontmatter":{"title":"How to eager load files with Rails","date":"March 04, 2022","tags":["rails","ruby"],"excerpt":"Eager loading increases performance and thus is useful in production environments.\nBut this conditional behaviour can also lead to works-on-my-machine moments.\n"},"fields":{"slug":"/2022-03-04-rails-eager-loading-all-files/"}}}]}},"pageContext":{}},"staticQueryHashes":["2212750296","2457483284","3019618709","63159454"]}