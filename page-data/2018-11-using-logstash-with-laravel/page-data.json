{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-11-using-logstash-with-laravel/","result":{"data":{"site":{"siteMetadata":{"url":"https://dominikb.io","title":"Dominik Bauernfeind","labels":[{"tag":"laravel","tech":"Laravel","name":"DiLaravel","size":20,"color":"#ff2c1f"},{"tag":"php","tech":"PHP","name":"DiPhp","size":20,"color":"#8892bf"},{"tag":"gitlab","tech":"Gitlab","name":"FaGitlab","size":20,"color":"#fc6d25"},{"tag":"cicd","tech":"CI/CD","name":"DiTerminal","size":20,"color":null},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"#aa1401"},{"tag":"rails","tech":"Rails","name":"SiRubyonrails","size":20,"color":"#d30001"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"#df0000"},{"tag":"spring","tech":"Spring","name":"SiSpring","size":20,"color":"#6db33f"},{"tag":"spring-boot","tech":"Spring Boot","name":"SiSpringboot","size":20,"color":"#6db33f"}]}},"markdownRemark":{"html":"<p>Lately, I have been developing an application based on Laravel 5.7 that makes heavy use of Laravels Queue feature.</p>\n<p>In order to easier structure different debug information for multiple hosts we use Elastic Logstash and Kibana.</p>\n<p>Laravel does not come with a pre-configured Logstash driver option, but I got it up and running with very little work.</p>\n<h2>Logstash Driver</h2>\n<p>Laravels logging configuration is placed within the <code class=\"language-text\">config/logging.php</code> file. In order to add our configuration for Logstash, we simply add a custom provider.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ... other configuration stuff</span>\n\n    <span class=\"token string single-quoted-string\">'channels'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// ... other channels like stack or single</span>\n\n        <span class=\"token string single-quoted-string\">'logstash'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'custom'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'via'</span>    <span class=\"token operator\">=></span> <span class=\"token class-name class-name-fully-qualified static-context\"><span class=\"token punctuation\">\\</span>App<span class=\"token punctuation\">\\</span>LogstashLogger</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'host'</span>   <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LOGSTASH_HOST'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'port'</span>   <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LOGSTASH_PORT'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4718</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>For more on how to define custom loggers, refer to the <a href=\"https://laravel.com/docs/5.7/logging#creating-channels-via-factories\">Laravel documentation</a>.</p>\n<h2>Logstash Logger Provider</h2>\n<p>So what does our factory class do? All it needs to do is to implement PHPs magic method <code class=\"language-text\">__invoke()</code> and return an instance of <code class=\"language-text\">\\Psr\\Log\\LoggerInterface</code></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Formatter<span class=\"token punctuation\">\\</span>LogstashFormatter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Handler<span class=\"token punctuation\">\\</span>SocketHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Logger</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Psr<span class=\"token punctuation\">\\</span>Log<span class=\"token punctuation\">\\</span>LoggerInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">LogstashLogger</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @param array $config\n     * @return LoggerInterface\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">LoggerInterface</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SocketHandler</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"udp://<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'host'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>:<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'port'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$handler</span><span class=\"token operator\">-></span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LogstashFormatter</span><span class=\"token punctuation\">(</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'app.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'logstash.main'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$handler</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n</br>\n<h2>â€¦ and done!</h2>\n<p>Now you are ready to use the custom channel to ship your logs via UDP to any Logstash Host that accepts data on the specified port.</p>\n<p>To use the new configuration add it to a logging channel of type <code class=\"language-text\">'stack'</code> or make use of it directly: <code class=\"language-text\">Log::channel('logstash')->debug('Logging to logstash');</code></p>","frontmatter":{"title":"Using Logstash with Laravel","date":"November 13, 2018","tags":["laravel","php"]}}},"pageContext":{"slug":"/2018-11-using-logstash-with-laravel/"}},"staticQueryHashes":["2212750296","2457483284","3019618709","63159454"]}