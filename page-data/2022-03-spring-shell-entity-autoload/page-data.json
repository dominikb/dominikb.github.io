{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-03-spring-shell-entity-autoload/","result":{"data":{"site":{"siteMetadata":{"url":"https://dominikb.io","title":"Dominik Bauernfeind","labels":[{"tag":"laravel","tech":"Laravel","name":"DiLaravel","size":20,"color":"#ff2c1f"},{"tag":"php","tech":"PHP","name":"DiPhp","size":20,"color":"#8892bf"},{"tag":"gitlab","tech":"Gitlab","name":"FaGitlab","size":20,"color":"#fc6d25"},{"tag":"cicd","tech":"CI/CD","name":"DiTerminal","size":20,"color":null},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"#aa1401"},{"tag":"rails","tech":"Rails","name":"SiRubyonrails","size":20,"color":"#d30001"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"#df0000"},{"tag":"spring","tech":"Spring","name":"SiSpring","size":20,"color":"#6db33f"},{"tag":"spring-boot","tech":"Spring Boot","name":"SiSpringboot","size":20,"color":"#6db33f"}]}},"markdownRemark":{"html":"<p> During an assignment for my lecture <em>Software-Development using Enterprise Technologies</em> we had to develop an auctioning system using Spring Boot. The interaction with this system had to be possible with a CLI developed using <a href=\"https://spring.io/projects/spring-shell\">Spring Shell</a>.</p>\n<p> The command we will look at in this post is the command <strong>bid</strong> which allows to place a on an article for a given user. The interface will look roughly like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> place-bid --article <span class=\"token number\">10</span> --buyer <span class=\"token number\">5</span> --price <span class=\"token number\">124</span> EUR</code></pre></div>\n<h2>Starting out</h2>\n<p>The method signature I started with was using simple, primitive objects as arguments which Spring could automatically parse from the user input.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> articleId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> customerId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span><span class=\"token punctuation\">(</span>arity <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>This left a lot to be desired. First, I want the price to use my abstraction <code class=\"language-text\">CurrencyAmount</code> which combines a numeric value with a unit <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. This was something I needed multiple times for other commands as well and having the conversion logic repeated for multiple commands seemed like a bad move.</p>\n<p>So I looked up how Spring Shell converts user input to method arguments. It turns out converting is done by having a <code class=\"language-text\">Converter&lt;Source, Target></code> component registered - <em>who could've thought</em>. As I had already some helper methods in place to convert a string into a <code class=\"language-text\">CurrencyAmount</code> this was straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrencyAmountConverter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CurrencyAmount</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parts <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Et voil√† - now we have improved our command signature significantly already.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> articleId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Long</span> customerId<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">CurrencyAmount</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h2>Continuing this thought</h2>\n<p>Now I was wondering if it was possible to even extract loading of entities.</p>\n<p>It turns out this works just the same: Implementing a converter <code class=\"language-text\">Converter&lt;String, Customer></code> simply worked.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerLoader</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">CustomerService</span> customerService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> customerService<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntityNotFoundException</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"Could not find customer for id '\"</span>  <span class=\"token operator\">+</span> source <span class=\"token operator\">+</span> <span class=\"token string\">\"'.\"</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After implementing converters for all my entities my problem was solved and it resulted in a nice looking interface for implementing shell commands. Or so it seemed at first...</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ShellMethod</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Place a bid on an article for a given customer\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"place-bid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Article</span> article<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">Customer</span> customer<span class=\"token punctuation\">,</span>\n                  <span class=\"token annotation punctuation\">@ShellOption</span> <span class=\"token class-name\">CurrencyAmount</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h2>Troubles in paradise</h2>\n<p>As it turns out problems with lazy-loading arised when trying to access related entities. My first thought was to slap a <code class=\"language-text\">@Transactional()</code> annotation onto the command method but this did not resolve the lazy-loading errors.</p>\n<p>The reason for this was that entities loaded by a converter were not attached to an <code class=\"language-text\">EntityManager</code> and thus the relation proxy could not execute the lazy-loading query.</p>\n<h2>AOP to the rescue</h2>\n<p>Out of curiosity and because I was already down this rabbit-hole too far, I tried to also resolve this issue using a custom <code class=\"language-text\">Aspect</code>. For every <code class=\"language-text\">Entity</code> loaded and injected as an argument, I need to call <code class=\"language-text\">merge()</code> on an open <code class=\"language-text\">EntityManger</code>.</p>\n<p>This was my solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoloadedEntityAttacherAspect</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PersistenceContext</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shellCommands() &amp;&amp; within(io.dominikb.homework3.commands.*)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">attachObjectsToEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.shell.standard.ShellMethod)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shellCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With having flexed my newly acquired knowledge about aspect-oriented programming I was satisfied with my solution and called it a day.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>For simplicity's sake and because floating point arithmetic is hard, my currency abstraction does not allow for cents.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrencyAmount</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Currency</span> unit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Currency</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">EURO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"‚Ç¨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">USD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> representation<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> representation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>representation <span class=\"token operator\">=</span> representation<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Currency</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"EUR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"‚Ç¨\"</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span>EURO<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$\"</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Currency</span><span class=\"token punctuation\">.</span>USD<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No currency available for given string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Autoloading entities in Spring Shell commands","date":"March 25, 2022","tags":["java","spring","spring-boot"]}}},"pageContext":{"slug":"/2022-03-spring-shell-entity-autoload/"}},"staticQueryHashes":["2212750296","2457483284","3019618709","63159454"]}