{"version":3,"sources":["webpack:///./src/components/sidebar/Bio.js","webpack:///./src/components/sidebar/SocialLinks.js","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/templates/post-list.js","webpack:///./src/components/tags/TechTag.js"],"names":["Bio","author","tagline","className","src","dominik","alt","SocialLinks","contacts","href","github","title","size","style","color","stackoverflow","twitter","Sidebar","query","render","data","site","siteMetadata","to","labels","map","label","TechTag","key","tag","PostList","props","posts","allMarkdownRemark","edges","pageContext","currentPage","isFirst","isLast","numPages","prevPage","nextPage","keywords","post","tags","node","frontmatter","id","fields","slug","date","excerpt","rel","textDecoration","args","useStaticQuery","find","it","icon","tech","name","test","React","createElement","FontAwesome","SimpleIcon","Devicons","fontSize"],"mappings":"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","file":"component---src-templates-post-list-js-f709ef32e788f4f205e2.js","sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport dominik from \"../../images/dominik.jpg\"\n\nconst Bio = ({ author, tagline }) => {\n\n    return (\n        <div className=\"bio-main w-75\">\n            <img src={dominik} alt=\"Dominik Bauernfeind\" />\n            <h3 className=\"mt-2 author-bio\">{author}</h3>\n            <small className=\"text-muted\">{tagline}</small>\n        </div>\n    )\n}\n\nexport default Bio","import React from \"react\"\nimport {\n    FaGithubSquare,\n    FaStackOverflow,\n    FaTwitterSquare\n} from \"react-icons/fa\"\nimport \"./sidebar.css\"\n\n\nconst SocialLinks = ({ contacts }) => {\n    return (\n        <div className=\"side-social-links float-left mt-3 mb-3\">\n            <a className=\"text-secondary p-2\"\n                href={contacts.github}>\n                <span title=\"GitHub\">\n                    <FaGithubSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.stackoverflow}>\n                <span title=\"Stack Overflow\">\n                    <FaStackOverflow size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.twitter}>\n                <span title=\"Twitter\">\n                    <FaTwitterSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n        </div>\n    )\n}\n\nexport default SocialLinks","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTag from \"../tags/TechTag\"\n\nconst Sidebar = () => {\n    return (\n        <StaticQuery\n            query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                github\n                                stackoverflow\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n            render={data => (\n                <>\n                    <div className=\"sidebar-main border-right\">\n                        <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n                        <SocialLinks contacts={data.site.siteMetadata.contacts} />\n                        <div className=\"page-links\">\n                            <Link to=\"/\"><span className=\"text-dark d-block py-1\">All Posts</span></Link>\n                            <Link to=\"/til\"><span className=\"text-dark d-block py-1\">Today I Learned (TIL)</span></Link>\n                            <Link to=\"/blog\"><span className=\"text-dark d-block py-1\">Blog</span></Link>\n                        </div>\n                        <div className=\"tech-tags mt-4\">\n                            {data.site.siteMetadata.labels.map(label => <TechTag key={label.tag} tag={label.tag} />)}\n                        </div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default Sidebar","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst PostList = props => {\n  const posts = props.data.allMarkdownRemark.edges\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = `/${currentPage === 2 ? '' : currentPage - 1}`;\n  const nextPage = `/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `blog`,\n          `graphql`,\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>Posted on {post.node.frontmatter.date}</i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.frontmatter.excerpt || post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">\n                  {tags.map(tag => <TechTag key={tag} tag={tag} />)}\n                </div>\n              </div>\n            )\n          })}\n          <div className=\"text-center mt-4\">\n            {!isFirst && (\n              <Link to={prevPage} rel=\"prev\" style={{ textDecoration: `none` }}>\n                <span className=\"text-dark\">← Previous Page</span>\n              </Link>\n            )}\n            {!isLast && (\n              <Link to={nextPage} rel=\"next\" style={{ textDecoration: `none` }}>\n                <span className=\"text-dark ml-5\">Next Page →</span>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const listQuery = graphql`\n  query paginateQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n            excerpt\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PostList\n","import React from \"react\"\nimport * as FontAwesome from \"react-icons/fa\"\nimport * as Devicons from \"react-icons/di\"\nimport * as SimpleIcon from \"react-icons/si\"\n\nimport \"./tags.css\"\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\n\nconst TechTag = (args) => {\n    const { tag } = args;\n\n    const data = useStaticQuery(\n        graphql`\n        query AvailableLabels {\n            site {\n            siteMetadata {\n                labels {\n                tag\n                tech\n                name\n                size\n                color\n                }\n            }\n            }\n        }\n        `\n    )\n\n    const label = data.site.siteMetadata.labels.find(it => it.tag === tag)\n    if (!label) return (<></>);\n\n    const { tech, name, size, color } = label;\n\n    let icon;\n    if (/^Fa/.test(name)) icon = React.createElement(FontAwesome[name]);\n    if (/^Si/.test(name)) icon = React.createElement(SimpleIcon[name]);\n    if (/^Di/.test(name)) icon = React.createElement(Devicons[name]);\n\n    return (\n        <div className=\"d-inline-block p-1\">\n            <Link to={`/tags/${tag}/`}>\n                <button\n                    className=\"tech-tag text-white\">\n                    <p className=\"d-inline\">{tech} </p>\n                    <div className=\"d-inline\" style={{ fontSize: size, color: color }}>{icon}</div>\n                </button>\n            </Link>\n\n        </div>\n\n    )\n}\n\nexport default TechTag"],"sourceRoot":""}